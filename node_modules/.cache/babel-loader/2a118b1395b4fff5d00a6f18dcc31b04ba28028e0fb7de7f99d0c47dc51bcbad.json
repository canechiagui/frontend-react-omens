{"ast":null,"code":"// src/api.js\nconst API_URL = 'http://localhost:3000/api/products';\n\n// Função para buscar os produtos\nexport const getProducts = async () => {\n  try {\n    const response = await fetch(API_URL);\n    if (!response.ok) {\n      throw new Error('Error fetching products');\n    }\n    return await response.json(); // Retorna os produtos como JSON\n  } catch (error) {\n    console.error('Error fetching products:', error);\n    throw error;\n  }\n};\n\n// Função para criar um novo produto\nexport const createProduct = async productData => {\n  const response = await fetch(API_URL, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      product: productData\n    })\n  });\n  if (!response.ok) {\n    throw new Error('Error creating product');\n  }\n  return response.json();\n};\n\n// Função para atualizar um produto\n// api.js\n\n// Função para atualizar um produto\nexport const updateProduct = async (productId, productData) => {\n  try {\n    const response = await fetch(`https://api.example.com/products/${productId}`, {\n      method: 'PUT',\n      // Método PUT para atualização\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(productData) // Envia os dados atualizados no corpo da requisição\n    });\n    if (!response.ok) {\n      throw new Error('Failed to update the product');\n    }\n    return await response.json(); // Retorna a resposta (produto atualizado)\n  } catch (error) {\n    console.error('Error updating product:', error);\n    throw error;\n  }\n};\n\n// Função para excluir um produto\nexport const deleteProduct = async id => {\n  const response = await fetch(`${API_URL}/${id}`, {\n    method: 'DELETE'\n  });\n  if (!response.ok) {\n    throw new Error('Error deleting product');\n  }\n  return response.json();\n};","map":{"version":3,"names":["API_URL","getProducts","response","fetch","ok","Error","json","error","console","createProduct","productData","method","headers","body","JSON","stringify","product","updateProduct","productId","deleteProduct","id"],"sources":["/Users/guilhermecanechia/Desktop/omens-front/src/api.js"],"sourcesContent":["// src/api.js\nconst API_URL = 'http://localhost:3000/api/products';\n\n// Função para buscar os produtos\nexport const getProducts = async () => {\n  try {\n    const response = await fetch(API_URL);\n    if (!response.ok) {\n      throw new Error('Error fetching products');\n    }\n    return await response.json();  // Retorna os produtos como JSON\n  } catch (error) {\n    console.error('Error fetching products:', error);\n    throw error;\n  }\n};\n\n// Função para criar um novo produto\nexport const createProduct = async (productData) => {\n  const response = await fetch(API_URL, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({ product: productData }),\n  });\n\n  if (!response.ok) {\n    throw new Error('Error creating product');\n  }\n\n  return response.json();\n};\n\n// Função para atualizar um produto\n// api.js\n\n// Função para atualizar um produto\nexport const updateProduct = async (productId, productData) => {\n  try {\n    const response = await fetch(`https://api.example.com/products/${productId}`, {\n      method: 'PUT', // Método PUT para atualização\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(productData), // Envia os dados atualizados no corpo da requisição\n    });\n\n    if (!response.ok) {\n      throw new Error('Failed to update the product');\n    }\n\n    return await response.json(); // Retorna a resposta (produto atualizado)\n  } catch (error) {\n    console.error('Error updating product:', error);\n    throw error;\n  }\n};\n\n\n// Função para excluir um produto\nexport const deleteProduct = async (id) => {\n  const response = await fetch(`${API_URL}/${id}`, {\n    method: 'DELETE',\n  });\n\n  if (!response.ok) {\n    throw new Error('Error deleting product');\n  }\n\n  return response.json();\n};\n"],"mappings":"AAAA;AACA,MAAMA,OAAO,GAAG,oCAAoC;;AAEpD;AACA,OAAO,MAAMC,WAAW,GAAG,MAAAA,CAAA,KAAY;EACrC,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACH,OAAO,CAAC;IACrC,IAAI,CAACE,QAAQ,CAACE,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,yBAAyB,CAAC;IAC5C;IACA,OAAO,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC,CAAC,CAAE;EACjC,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;IAChD,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAME,aAAa,GAAG,MAAOC,WAAW,IAAK;EAClD,MAAMR,QAAQ,GAAG,MAAMC,KAAK,CAACH,OAAO,EAAE;IACpCW,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,cAAc,EAAE;IAClB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAEC,OAAO,EAAEN;IAAY,CAAC;EAC/C,CAAC,CAAC;EAEF,IAAI,CAACR,QAAQ,CAACE,EAAE,EAAE;IAChB,MAAM,IAAIC,KAAK,CAAC,wBAAwB,CAAC;EAC3C;EAEA,OAAOH,QAAQ,CAACI,IAAI,CAAC,CAAC;AACxB,CAAC;;AAED;AACA;;AAEA;AACA,OAAO,MAAMW,aAAa,GAAG,MAAAA,CAAOC,SAAS,EAAER,WAAW,KAAK;EAC7D,IAAI;IACF,MAAMR,QAAQ,GAAG,MAAMC,KAAK,CAAC,oCAAoCe,SAAS,EAAE,EAAE;MAC5EP,MAAM,EAAE,KAAK;MAAE;MACfC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACL,WAAW,CAAC,CAAE;IACrC,CAAC,CAAC;IAEF,IAAI,CAACR,QAAQ,CAACE,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,8BAA8B,CAAC;IACjD;IAEA,OAAO,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC,CAAC,CAAC;EAChC,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IAC/C,MAAMA,KAAK;EACb;AACF,CAAC;;AAGD;AACA,OAAO,MAAMY,aAAa,GAAG,MAAOC,EAAE,IAAK;EACzC,MAAMlB,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGH,OAAO,IAAIoB,EAAE,EAAE,EAAE;IAC/CT,MAAM,EAAE;EACV,CAAC,CAAC;EAEF,IAAI,CAACT,QAAQ,CAACE,EAAE,EAAE;IAChB,MAAM,IAAIC,KAAK,CAAC,wBAAwB,CAAC;EAC3C;EAEA,OAAOH,QAAQ,CAACI,IAAI,CAAC,CAAC;AACxB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}